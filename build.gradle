plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.google.cloud.tools.jib' version '3.2.0'
    id 'java'
}

group = 'com.rb.alwaysontheroad'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

bootRun {
    systemProperties = System.properties
    jvmArgs = ['-Xms128M', '-Xmx256M', '-XX:ActiveProcessorCount=2', '-Dspring.profiles.active=local']
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
//    all {
//        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
//    }
}

repositories {
    mavenCentral()
}

ext['log4j2.version'] = '2.17.0'

ext {
    set('springCloudVersion', "2021.0.3")
    set('springBootAdminVersion', "2.6.2")
    set('mapStructVersion', '1.4.2.Final')
    set('lombokVersion', '1.18.24')
    set('commonsLang3Version', '3.12.0')
    set('commonsCollectionsVersion', '3.2.2')
    set('springBootAdminVersion', "2.6.2")
    set('spockVersion', '2.0-groovy-3.0')

    set('groupBy', 'drone-transport')
    set('githubUsername', System.getenv('GITHUB_USERNAME'))
    set('githubToken', System.getenv('GITHUB_TOKEN'))
}

jib {
    to {
        image = "mamedovrb/${groupBy}-${rootProject.name}:${project.version}"
        allowInsecureRegistries = true
        auth {
            username = "${githubUsername}"
            password = "${githubToken}"
        }
    }
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka-streams'
//    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
//    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
//    implementation 'org.springframework.cloud:spring-cloud-starter-config'
//    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
//    implementation 'de.codecentric:spring-boot-admin-starter-client'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    implementation 'org.jetbrains:annotations:23.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
//    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
//    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
//    implementation 'org.springframework.cloud:spring-cloud-sleuth-zipkin'
//    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
//    implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.5.2'

    implementation "org.projectlombok:lombok:${lombokVersion}", "org.mapstruct:mapstruct:${mapStructVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}", "org.mapstruct:mapstruct-processor:${mapStructVersion}", "org.projectlombok:lombok-mapstruct-binding:0.2.0"

    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
    implementation "commons-collections:commons-collections:${commonsCollectionsVersion}"
    testImplementation "org.apache.commons:commons-lang3:${commonsLang3Version}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation "org.spockframework:spock-core:${spockVersion}"
//    testImplementation "org.spockframework:spock-spring:${spockVersion}"
}

tasks.named('test') {
    useJUnitPlatform()
}
